type TokenMetadata = 
 record {
   approved_at: opt nat64;
   approved_by: opt principal;
   burned_at: opt nat64;
   burned_by: opt principal;
   is_burned: bool;
   minted_at: nat64;
   minted_by: principal;
   operator: opt principal;
   owner: opt principal;
   properties: vec NMCProperties;
   token_identifier: nat;
   transferred_at: opt nat64;
   transferred_by: opt principal;
 };
type SupportedInterface = 
 record {
   Approval: null;
   Burn: null;
   Mint: null;
   TransactionHistory: null;
 };
type Stats = 
 record {
   cycles: nat;
   total_supply: nat;
   total_transactions: nat;
   total_unique_holders: nat;
 };
type Result_3 = 
 variant {
   err: NftError;
   ok: nat;
 };
type Result_2 = 
 variant {
   err: NftError;
   ok: opt principal;
 };
type Result_1 = 
 variant {
   err: NftError;
   ok: vec TokenMetadata;
 };
type Result = 
 variant {
   err: NftError;
   ok: TokenMetadata;
 };
type NftError = 
 variant {
   ExistedNFT;
   NotFound;
   OperatorNotFound;
   Other: text;
   OwnerNotFound;
   SelfApprove;
   SelfTransfer;
   TokenNotFound;
   UnauthorizedOperator;
   UnauthorizedOwner;
 };
type NMCProperties = 
 record {
   alias: text;
   ancestorsImages: opt vec nat8;
   ancestorsNames: opt vec text;
   bankooImage: opt vec nat8;
   bankooText: opt vec text;
   category: text;
   data: opt vec nat8;
   discovered: opt vec text;
   discoveredProgress: opt float64;
   domains: opt vec nat64;
   earthImage: opt vec nat8;
   earthText: opt vec text;
   email: text;
   endurance: opt float64;
   fsOn: opt bool;
   health: opt nat64;
   identifier: text;
   imageURI: text;
   landNumber: nat64;
   landRank: nat64;
   linked: opt bool;
   mental: opt nat64;
   musicLevel: opt float64;
   netClass: opt text;
   network: opt vec text;
   notiOn: opt bool;
   physical: opt nat64;
   pillType: text;
   playerLocation: nat64;
   power: opt nat64;
   powerUps: opt vec nat64;
   progress: nat64;
   rank: nat64;
   sight: opt nat64;
   soundLevel: opt float64;
   speed: opt nat64;
   story: opt text;
   styles: opt vec text;
   videoURI: opt text;
   xp: opt nat64;
 };
type Metadata = 
 record {
   created_at: nat64;
   custodians: vec principal;
   logo: opt text;
   name: opt text;
   symbol: opt text;
   upgraded_at: nat64;
 };
service : {
  adminUser: () -> (text) query;
  balanceOf: (principal) -> (Result_3) query;
  custodians: () -> (vec principal) query;
  cycles: () -> (nat) query;
  logo: () -> (opt text) query;
  metadata: () -> (Metadata) query;
  mint: (principal, nat, vec NMCProperties) -> (Result_3);
  name: () -> (opt text) query;
  operatorOf: (nat) -> (Result_2) query;
  operatorTokenMetadata: (principal) -> (Result_1) query;
  ownerOf: (nat) -> (Result_2) query;
  ownerTokenMetadata: (principal) -> (Result_1) query;
  setCustodians: (vec principal) -> ();
  setLogo: (text) -> ();
  setName: (text) -> ();
  setSymbol: (text) -> ();
  stats: () -> (Stats) query;
  supportedInterfaces: () -> (vec SupportedInterface) query;
  symbol: () -> (opt text) query;
  tokenMetadata: (nat) -> (Result) query;
  totalSupply: () -> (nat) query;
  totalUniqueHolders: () -> (nat) query;
}
