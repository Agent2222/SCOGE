class n{constructor(s,e,t,o){this.mapEvents=o,this.mapping=s,this.player=e,this.camera=t,this.keys={},this.controls={up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",action:" ",tip:"t",system:"s"},this.init()}init(){document.addEventListener("keydown",t=>{this.keys[t.key]=!0,this.keys[this.controls.system]&&window.loggedIn===!0&&document.getElementById("miniAgent").toggle(),(this.keys[this.controls.up]||this.keys[this.controls.down]||this.keys[this.controls.left]||this.keys[this.controls.right]&&window.loggedIn===!0)&&(window.soundtrack.movement(!0),e())}),document.addEventListener("keyup",t=>{this.keys[t.key]=!1,!(this.keys[this.controls.up]||this.keys[this.controls.down]||this.keys[this.controls.left]||this.keys[this.controls.right])&&window.loggedIn===!0&&window.movementBlock===!1&&window.soundtrack.movement(!1)});const s=()=>{requestAnimationFrame(s)},e=t=>{window.movementBlock===!1&&(this.keys[this.controls.up]&&this.camera.domainZoom(),this.keys[this.controls.down]&&this.camera.moveCamera("down"),this.keys[this.controls.left]&&this.camera.moveCamera("left"),this.keys[this.controls.right]&&this.camera.moveCamera("right"))};s()}}export{n as Controls};
